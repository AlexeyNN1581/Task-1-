package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;

import javax.xml.transform.Result;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class UserDaoJDBCImpl implements UserDao {
    public UserDaoJDBCImpl() {

    }

    private static String INSERT_USER = "INSERT INTO users(name,last_name,age) VALUES(?,?,?)";

    public void createUsersTable() {
        String tablica = """
                CREATE  TABLE IF NOT EXISTS users (
                    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                 name VARCHAR(100), 
                    last_name VARCHAR(100),
                    age SMALLINT
                   ) 
                """;
        try (Connection con = Util.getConnection();
             Statement statement = con.createStatement()) {
            statement.executeUpdate(tablica);
            System.out.println("Таблица создана");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void dropUsersTable() {
        String s = """
                DROP TABLE IF EXISTS users 
                """;
        try (Connection connection = Util.getConnection();
             Statement statement = connection.createStatement()) {
            statement.executeUpdate(s);
        } catch (SQLException e) {
            e.printStackTrace();
        }

        System.out.println("table is dropped");
    }


    public void saveUser(String name, String lastName, byte age) {
        try (Connection connection = Util.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_USER);) {
            preparedStatement.setString(1, name);
            preparedStatement.setString(2, lastName);
            preparedStatement.setByte(3, age);
        } catch (SQLException ex) {
            ex.printStackTrace();


        }
        System.out.println("this user is saved");
    }

    public void removeUserById(long id) {
        try (Connection connection = Util.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement("DELETE FROM users WHERE id=?")) {
            preparedStatement.setLong(1, id);
            preparedStatement.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        System.out.println("this user is remove");
    }

    public List<User> getAllUsers() {
        List<User> users = new ArrayList<>();
        try (Connection connection = Util.getConnection();
             Statement statement = connection.createStatement();
             ResultSet result = statement.executeQuery("SELECT id,name,last_name,age FROM users ")) {
            while (result.next()) {
                long id = result.getLong(1);
                String name = result.getString(2);
                String last_name = result.getString(3);
                byte age = result.getByte(4);
                User user = new User();
                user.setId(id);
                users.add(user);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("this user is list");
        return users;

    }

    public void cleanUsersTable() {
        try (Connection connection = Util.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement("DELETE FROM users");) {
            preparedStatement.executeUpdate();


        } catch (SQLException e) {
            e.printStackTrace();
        }
        System.out.println("users is cleaned");
    }
}
